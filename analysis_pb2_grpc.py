# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import analysis_pb2 as analysis__pb2


class DataAnalysisStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeByAuthor = channel.unary_unary(
                '/analysis.DataAnalysis/AnalyzeByAuthor',
                request_serializer=analysis__pb2.Author.SerializeToString,
                response_deserializer=analysis__pb2.Status.FromString,
                )
        self.AnalyzeByPostId = channel.unary_unary(
                '/analysis.DataAnalysis/AnalyzeByPostId',
                request_serializer=analysis__pb2.Id.SerializeToString,
                response_deserializer=analysis__pb2.PostResult.FromString,
                )
        self.AnalyzePost = channel.unary_unary(
                '/analysis.DataAnalysis/AnalyzePost',
                request_serializer=analysis__pb2.Text.SerializeToString,
                response_deserializer=analysis__pb2.PostResult.FromString,
                )


class DataAnalysisServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AnalyzeByAuthor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeByPostId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataAnalysisServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeByAuthor': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeByAuthor,
                    request_deserializer=analysis__pb2.Author.FromString,
                    response_serializer=analysis__pb2.Status.SerializeToString,
            ),
            'AnalyzeByPostId': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeByPostId,
                    request_deserializer=analysis__pb2.Id.FromString,
                    response_serializer=analysis__pb2.PostResult.SerializeToString,
            ),
            'AnalyzePost': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzePost,
                    request_deserializer=analysis__pb2.Text.FromString,
                    response_serializer=analysis__pb2.PostResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'analysis.DataAnalysis', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataAnalysis(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AnalyzeByAuthor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/analysis.DataAnalysis/AnalyzeByAuthor',
            analysis__pb2.Author.SerializeToString,
            analysis__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AnalyzeByPostId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/analysis.DataAnalysis/AnalyzeByPostId',
            analysis__pb2.Id.SerializeToString,
            analysis__pb2.PostResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AnalyzePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/analysis.DataAnalysis/AnalyzePost',
            analysis__pb2.Text.SerializeToString,
            analysis__pb2.PostResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
